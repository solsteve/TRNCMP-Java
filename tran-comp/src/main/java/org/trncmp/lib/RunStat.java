// ====================================================================== BEGIN FILE =====
// **                                   R U N S T A T                                   **
// =======================================================================================
// **                                                                                   **
// **  Copyright (c) 2017, Stephen W. Soliday                                           **
// **                      stephen.soliday@trncmp.org                                   **
// **                      http://research.trncmp.org                                   **
// **                                                                                   **
// **  -------------------------------------------------------------------------------  **
// **                                                                                   **
// **  This program is free software: you can redistribute it and/or modify it under    **
// **  the terms of the GNU General Public License as published by the Free Software    **
// **  Foundation, either version 3 of the License, or (at your option)                 **
// **  any later version.                                                               **
// **                                                                                   **
// **  This program is distributed in the hope that it will be useful, but WITHOUT      **
// **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS    **
// **  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.   **
// **                                                                                   **
// **  You should have received a copy of the GNU General Public License along with     **
// **  this program. If not, see <http://www.gnu.org/licenses/>.                        **
// **                                                                                   **
// ----- Modification History ------------------------------------------------------------
/**
 * @file RunStat.java
 *  Provides interface and methods.
 *  <p>
 *
 * @author Stephen W. Soliday
 * @date 2017-08-29
 */
// =======================================================================================

package org.trncmp.lib;

// =======================================================================================
public class RunStat {
  // -------------------------------------------------------------------------------------

  private double  min_value   = Math2.N_MAX_POS;
  private double  max_value   = Math2.N_MAX_NEG;
  private double  mean_value  = Math2.N_ZERO;
  private double  mean_value2 = Math2.N_ZERO;
  private long    n_sample    = 0L;

  // =====================================================================================
  /** @brief Constructor.
   */
  // -------------------------------------------------------------------------------------
  public RunStat( ) {
    // -----------------------------------------------------------------------------------
    reset();
  }

  // =====================================================================================
  /** @brief Reset.
   */
  // -------------------------------------------------------------------------------------
  public void reset( ) {
    // -----------------------------------------------------------------------------------
    min_value   = Math2.N_MAX_POS;
    max_value   = Math2.N_MAX_NEG;
    mean_value  = Math2.N_ZERO;
    mean_value2 = Math2.N_ZERO;
    n_sample    = 0L;
  }

  // =====================================================================================
  /** @brief Count.
   *  @return number of samples processed.
   */
  // -------------------------------------------------------------------------------------
  public long count( ) {
    // -----------------------------------------------------------------------------------
    return n_sample;
  }

  // =====================================================================================
  /** @brief Minimum.
   *  @return the minimum sample value processed.
   */
  // -------------------------------------------------------------------------------------
  public double minv( ) {
    // -----------------------------------------------------------------------------------
    return min_value;
  }

  // =====================================================================================
  /** @brief Maximum.
   *  @return the maximum sample value processed.
   */
  // -------------------------------------------------------------------------------------
  public double maxv( ) {
    // -----------------------------------------------------------------------------------
    return max_value;
  }

  // =====================================================================================
  /** @brief Mean.
   *  @return the mean of the samples processed.
   */
  // -------------------------------------------------------------------------------------
  public double mean( ) {
    // -----------------------------------------------------------------------------------
    return mean_value;
  }

  // =====================================================================================
  /** @brief Variance.
   *  @return the variance of the samples processed.
   */
  // -------------------------------------------------------------------------------------
  public double var( ) {
    // -----------------------------------------------------------------------------------
    return mean_value2 - (mean_value*mean_value);
  }

  // =====================================================================================
  /** @brief Sigma.
   *  @return the standard deviation of the samples processed.
   */
  // -------------------------------------------------------------------------------------
  public double sigma( ) {
    // -----------------------------------------------------------------------------------
    return Math.sqrt( var() );
  }

  // =====================================================================================
  /** @brief Update.
   *  @param x sample value.
   */
  // -------------------------------------------------------------------------------------
  public void update( double x ) {
    // -----------------------------------------------------------------------------------
    if ( min_value > x ) min_value = x;
    if ( max_value < x ) max_value = x;
    double t  = (double)n_sample * mean_value;
    double t2 = (double)n_sample * mean_value2;
    n_sample += 1;
    mean_value  = (x + t)/(double)n_sample;
    mean_value2 = (x*x + t2)/(double)n_sample;
  }

  // =====================================================================================
  /** @brief Update.
   *  @param x sample value.
   */
  // -------------------------------------------------------------------------------------
  public void update( float x ) {
    // -----------------------------------------------------------------------------------
    update( (double) x );
  }

  // =====================================================================================
  /** @brief Update.
   *  @param x sample value.
   */
  // -------------------------------------------------------------------------------------
  public void update( short x ) {
    // -----------------------------------------------------------------------------------
    update( (double) x );
  }

  // =====================================================================================
  /** @brief Update.
   *  @param x sample value.
   */
  // -------------------------------------------------------------------------------------
  public void update( int x ) {
    // -----------------------------------------------------------------------------------
    update( (double) x );
  }

  // =====================================================================================
  /** @brief Update.
   *  @param x sample value.
   */
  // -------------------------------------------------------------------------------------
  public void update( long x ) {
    // -----------------------------------------------------------------------------------
    update( (double) x );
  }

  // =====================================================================================
  /** @brief Update.
   *  @param x array of sample values.
   */
  // -------------------------------------------------------------------------------------
  public void batch( double[] x ) {
    // -----------------------------------------------------------------------------------
    int n=x.length;
    for ( int i=0; i<n; i++ ) update( x[i] );
  }

  // =====================================================================================
  /** @brief Update.
   *  @param x array of sample values.
   */
  // -------------------------------------------------------------------------------------
  public void batch( float[] x ) {
    // -----------------------------------------------------------------------------------
    int n=x.length;
    for ( int i=0; i<n; i++ ) update( (double)x[i] );
  }

  // =====================================================================================
  /** @brief Update.
   *  @param x array of sample values.
   */
  // -------------------------------------------------------------------------------------
  public void batch( short[] x ) {
    // -----------------------------------------------------------------------------------
    int n=x.length;
    for ( int i=0; i<n; i++ ) update( (double)x[i] );
  }

  // =====================================================================================
  /** @brief Update.
   *  @param x array of sample values.
   */
  // -------------------------------------------------------------------------------------
  public void batch( int[] x ) {
    // -----------------------------------------------------------------------------------
    int n=x.length;
    for ( int i=0; i<n; i++ ) update( (double)x[i] );
  }

  // =====================================================================================
  /** @brief Update.
   *  @param x array of sample values.
   */
  // -------------------------------------------------------------------------------------
  public void batch( long[] x ) {
    // -----------------------------------------------------------------------------------
    int n=x.length;
    for ( int i=0; i<n; i++ ) update( (double)x[i] );
  }

};

    
// =======================================================================================
// **                                   R U N S T A T                                   **
// ======================================================================== END FILE =====
