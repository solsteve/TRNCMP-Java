// ====================================================================== BEGIN FILE =====
// **                                      F F T                                        **
// =======================================================================================
// **                                                                                   **
// **  Copyright (c) 2019, Stephen W. Soliday                                           **
// **                      stephen.soliday@trncmp.org                                   **
// **                      http://research.trncmp.org                                   **
// **                                                                                   **
// **  -------------------------------------------------------------------------------  **
// **                                                                                   **
// **  This program is free software: you can redistribute it and/or modify it under    **
// **  the terms of the GNU General Public License as published by the Free Software    **
// **  Foundation, either version 3 of the License, or (at your option)                 **
// **  any later version.                                                               **
// **                                                                                   **
// **  This program is distributed in the hope that it will be useful, but WITHOUT      **
// **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS    **
// **  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.   **
// **                                                                                   **
// **  You should have received a copy of the GNU General Public License along with     **
// **  this program. If not, see <http://www.gnu.org/licenses/>.                        **
// **                                                                                   **
// ----- Modification History ------------------------------------------------------------
/**
 * @brief   Fast Fourier Transform
 * @file    FFT.java
 *
 * @details Provides the interface and procedures for a Cooley-Tukey implementation
 *          of the fast Fourier Transform. Also, include is an auto-correlation procedure.
 *
 * @date    2019-01-24
 */
// =======================================================================================

package org.trncmp.lib;


// =======================================================================================
public class FFT {
  // -------------------------------------------------------------------------------------


  // =====================================================================================
  private static int recursiveforward( double[] Xr, double[] Xi ) {
    // -----------------------------------------------------------------------------------

    int N   = Xr.length;
    int Nd2 = N/2;
    
    if ( N == 1 ) return 1;

    if ( 0 != (N%2) ) {
      throw new IllegalArgumentException("n is not a power of 2");
    }

    // ----- FFT of the even terms ------------------------
    
    double[] Er = new double[N/2];
    double[] Ei = new double[N/2];
    for ( int k=0; k<Nd2; k++ ) {
      Er[k] = Xr[2*k];
      Ei[k] = Xi[2*k];
    }
    recursiveforward( Er, Ei );

    // ----- FFT of the odd terms -------------------------
    
    double[] Or = new double[N/2];
    double[] Oi = new double[N/2];
    for ( int k=0; k<Nd2; k++ ) {
      Or[k] = Xr[2*k + 1];
      Oi[k] = Xi[2*k + 1];
    }
    recursiveforward( Or, Oi );

    // ----- Combine odd and even elements ----------------

    double Q  = -Math2.N_2PI / (double) N;
    int    Nh = N/2;

    for ( int i=0; i<Nd2; i++ ) {
      double t  = Q * (double) i;
      double C  = Math.cos( t );
      double S  = Math.sin( t );
      double Tr = (Or[i] * C) - (Oi[i] * S);
      double Ti = (Or[i] * S) + (Oi[i] * C);
      Xr[i]     = Er[i] + Tr;
      Xi[i]     = Ei[i] + Ti;
      Xr[i+Nh]  = Er[i] - Tr;
      Xi[i+Nh]  = Ei[i] - Ti;
    }

    return 0;
  }

  // =====================================================================================
  public static int forward( double[][] data ) {
    // -----------------------------------------------------------------------------------
    return recursiveforward( data[0], data[1] );
  }

  // =====================================================================================
  public static int inverse( double[][] data ) {
    // -----------------------------------------------------------------------------------

    int    N   = data[0].length;
    double dfn = 1.0e0 / (double) N;
    
    for ( int i=0; i<N; i++ ) {
      data[1][i] = -data[1][i];
    }

    recursiveforward( data[0], data[1] );

    for ( int i=0; i<N; i++ ) {
      data[0][i] *= dfn; 
      data[1][i] = -dfn*data[1][i];
    }
    
    return 0;
  }






  // =====================================================================================
  public static final double[][] testVectors() {
    // -----------------------------------------------------------------------------------

    final double[][] TV = {
      { 0.0000000000000000e+00,  5.4614451035858980e-01,  5.4614451035671752e-01,  0.0000000000000000e+00 },
      { 3.2258064516129031e-02, -6.3136611133540618e-02,  3.3334599683641630e+00,  3.4067954661615024e-02 },
      { 6.4516129032258063e-02,  1.0723729931871533e-02,  4.3450564215269916e-01,  1.7195704548239771e-01 },
      { 9.6774193548387094e-02,  5.8287148018009005e-01,  3.1333081068735602e-01,  1.1851629855750323e-01 },
      { 1.2903225806451613e-01, -4.9403550365343579e-02,  3.1289678898257445e-01,  1.7651159912631753e-01 },
      { 1.6129032258064516e-01, -1.4446523401297054e-02,  2.5584660491153155e-01,  2.5667281754530324e-01 },
      { 1.9354838709677419e-01,  3.6762056600519460e-01, -6.5643029922458718e-01,  6.4070301139359542e-01 },
      { 2.2580645161290322e-01, -3.9262698711534150e-01,  7.8713250791924139e-01,  2.4480699698528602e-01 },
      { 2.5806451612903225e-01,  2.1875264374091308e-01,  7.1194203204719986e-01,  4.1163828802167085e-01 },
      { 2.9032258064516125e-01,  2.1495814377594358e-01,  8.1051266723962112e-01,  6.2148750768226213e-01 },
      { 3.2258064516129026e-01, -4.2886877286255121e-01,  1.1505199030305193e+00,  1.0756646398504708e+00 },
      { 3.5483870967741926e-01,  3.1066226449995099e-02,  3.5844736169083768e+00,  3.8862490965573384e+00 },
      { 3.8709677419354827e-01, -2.8953021492512599e-02, -1.6043465080934045e+00, -1.8912573373014525e+00 },
      { 4.1935483870967727e-01, -4.8247181382134263e-01, -5.2237260391128726e-01, -5.7747018458710042e-01 },
      { 4.5161290322580627e-01,  3.0347857120454008e-01, -3.0527456153506660e-01, -1.7910056642477981e-01 },
      { 4.8387096774193528e-01, -2.8061741644281735e-01, -4.1959896723528711e-01,  2.3634181104995780e-01 },
      { 5.1612903225806428e-01, -4.7170356525187340e-01,  5.5728461663087692e-01,  0.0000000000000000e+00 },
      { 5.4838709677419328e-01,  1.3313540887846775e-01, -4.1959896723528889e-01, -2.3634181104995164e-01 },
      { 5.8064516129032229e-01, -3.1405638516065254e-01, -3.0527456153506571e-01,  1.7910056642478139e-01 },
      { 6.1290322580645129e-01, -2.2301998139847681e-01, -5.2237260391128792e-01,  5.7747018458710819e-01 },
      { 6.4516129032258029e-01,  2.7053943465131491e-01, -1.6043465080934023e+00,  1.8912573373014534e+00 },
      { 6.7741935483870930e-01, -5.1986511860950069e-01,  3.5844736169083662e+00, -3.8862490965573455e+00 },
      { 7.0967741935483830e-01, -8.9512503146994327e-02,  1.1505199030305175e+00, -1.0756646398504726e+00 },
      { 7.4193548387096731e-01,  2.6441380118899899e-01,  8.1051266723961868e-01, -6.2148750768226280e-01 },
      { 7.7419354838709631e-01, -3.0014186974008766e-01,  7.1194203204719986e-01, -4.1163828802167085e-01 },
      { 8.0645161290322531e-01,  2.5279199219475362e-01,  7.8713250791923917e-01, -2.4480699698528596e-01 },
      { 8.3870967741935432e-01,  1.7520232684603881e-01, -6.5643029922458884e-01, -6.4070301139359409e-01 },
      { 8.7096774193548332e-01, -3.2519751577858758e-01,  2.5584660491152911e-01, -2.5667281754530147e-01 },
      { 9.0322580645161232e-01,  4.4659371586949792e-01,  3.1289678898257312e-01, -1.7651159912631842e-01 },
      { 9.3548387096774133e-01,  2.7043035153714068e-01,  3.1333081068735602e-01, -1.1851629855750301e-01 },
      { 9.6774193548387033e-01, -1.0470126709414823e-01,  4.3450564215270004e-01, -1.7195704548239901e-01 },
      { 9.9999999999999933e-01,  5.4614451035843459e-01,  3.3334599683641617e+00, -3.4067954661622851e-02 } };

    return TV;
  }

  
}

// =======================================================================================
// **                                      F F T                                        **
// =========================================================================== END FILE ==
